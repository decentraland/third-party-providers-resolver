name: Manual

on:
  workflow_dispatch:
    inputs:
      service-name:
        required: true
        type: string
        description: |-
          Service name to deploy
      deployment-environment:
        required: true
        type: string
        options:
          - 'dev'
          - 'stg'
          - 'prd'
        description: |-
          Target environment
      docker-tag:
        required: false
        type: string
        description: |-
          Docker tag to label the released image
          Example values: next | latest
      release-tag:
        required: false
        type: string
        description: |-
          Github release tag to label the released image
          Required when releaseing to prod ('prd' environment)
          Example value: 1.0.0
      build-args:
        required: false
        type: string
        description: |-
          Any arguments needed to build the image
      layers:
        required: false
        type: boolean
        default: true
        description: |-
          Indicates if the Docker layers cache mechanism should be used
          Default value: true
      dockerfile-url:
        required: false
        type: string
        description: |-
          Place the URL from where the Dockerfile should be downloaded
    secrets:
      QUAY_USERNAME:
        required: true
      QUAY_TOKEN:
        required: true
    outputs:
      registry-path:
        description: "Registry path"
        value: ${{ jobs.quay-build-push.registry-path }}
      registry-paths:
        description: "Registry paths (JSON)"
        value: ${{ jobs.quay-build-push.registry-paths }}

jobs:
  quay-build-push:
    runs-on: ubuntu-latest
    outputs:
      registry-path: ${{ steps.push-to-quay.outputs.registry-path }}
      registry-paths: ${{ steps.push-to-quay.outputs.registry-paths }}
    steps:
      - uses: actions/checkout@v3
      - name: download Dockerfile
        if: ${{ inputs.dockerfile-url }}
        run: wget -O Dockerfile ${{ inputs.dockerfile-url }}
      - name: Validate Inputs
        id: validate-inputs
        run: |
          if [ -z "${{ inputs.release-tag }}" ] && [ "${{ inputs.deployment-environment }}" == "prd" ]; then
            echo "Input 'release-tag' is required when 'deployment-environment' is set to 'prd'."
            exit 1
          fi
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ inputs.service-name }}
          layers: ${{ inputs.layers }}
          tags: |-
            ${{ github.sha }}
            ${{ inputs.docker-tag }}
            ${{ if eq(inputs.environment, 'prd') }}${{ inputs.release-tag }}${{ endif }}
            ${{ if eq(inputs.environment, 'prd') }}latest${{ endif }}
          dockerfiles: |
            ./Dockerfile
          build-args: |
            ${{ inputs.build-args }}
            CURRENT_VERSION=${{ inputs.release-tag }}
            COMMIT_HASH=${{ github.sha }}
      # Podman Login action (https://github.com/redhat-actions/podman-login) also be used to log in,
      # in which case 'username' and 'password' can be omitted.
      - name: Push To quay.io
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: quay.io/decentraland
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Print image url
        run: echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}"

  deployment:
    if: ${{ inputs.deployment-environment }}
    needs: [quay-build-push]
    name: "Deploy to: ${{ inputs.deployment-environment }}"
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deployment
        id: deploy
        uses: decentraland/dcl-deploy-action@main
        with:
          dockerImage: "${{ needs.quay-build-push.outputs.registry-path }}"
          serviceName: ${{ inputs.service-name }}
          env: ${{ inputs.deployment-environment }}
          token: ${{ secrets.GITHUB_TOKEN }}
